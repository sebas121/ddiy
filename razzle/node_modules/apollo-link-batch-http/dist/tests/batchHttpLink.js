"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sinon = require("sinon");
var batchHttpLink_1 = require("../src/batchHttpLink");
var proxy = require("proxyquire");
var apollo_link_core_1 = require("apollo-link-core");
var graphql_1 = require("graphql");
var graphql_tag_1 = require("graphql-tag");
describe('BatchHttpLink', function () {
    it('does not need any constructor arguments', function () {
        chai_1.assert.doesNotThrow(function () { return new batchHttpLink_1.default(); });
    });
    it('should pass batchInterval and batchMax to BatchLink', function () {
        var stub = sinon.stub();
        var BatchHttpProxy = proxy('../src/batchHttpLink', {
            'apollo-link-batch': {
                default: stub,
            },
        }).default;
        var batch = new BatchHttpProxy({
            batchInterval: 20,
            batchMax: 20,
        });
        chai_1.assert(batch);
        chai_1.assert(stub.called);
        chai_1.assert.equal(stub.firstCall.args[0].batchInterval, 20);
        chai_1.assert.equal(stub.firstCall.args[0].batchMax, 20);
    });
    var operation = {
        query: (_a = ["\n      query SampleQuery {\n        stub {\n          id\n        }\n      }\n    "], _a.raw = ["\n      query SampleQuery {\n        stub {\n          id\n        }\n      }\n    "], graphql_tag_1.default(_a)),
    };
    it('should pass printed operation to apollo fetch', function (done) {
        var apolloFetch = function (operations) {
            chai_1.assert(Array.isArray(operations));
            chai_1.assert.equal(operations.length, 1);
            chai_1.assert.deepEqual(operations[0].query, graphql_1.print(operation.query));
            done();
            return apollo_link_core_1.makePromise(apollo_link_core_1.Observable.of());
        };
        apolloFetch.use = function () { return void 0; };
        apolloFetch.useAfter = function () { return void 0; };
        apolloFetch.batchUse = function () { return void 0; };
        apolloFetch.batchUseAfter = function () { return void 0; };
        var link = apollo_link_core_1.ApolloLink.from([
            new batchHttpLink_1.default({
                fetch: apolloFetch,
            }),
        ]);
        apollo_link_core_1.execute(link, operation).subscribe({});
    });
    it("should call observer's error when apollo fetch returns an error", function (done) {
        var error = new Error('Evans Hauser');
        var apolloFetch = function (operations) {
            chai_1.assert(Array.isArray(operations));
            chai_1.assert.equal(operations.length, 1);
            chai_1.assert.deepEqual(operations[0].query, graphql_1.print(operation.query));
            return apollo_link_core_1.makePromise(new apollo_link_core_1.Observable(function (observer) {
                observer.error(error);
            }));
        };
        apolloFetch.use = function () { return void 0; };
        apolloFetch.useAfter = function () { return void 0; };
        apolloFetch.batchUse = function () { return void 0; };
        apolloFetch.batchUseAfter = function () { return void 0; };
        var link = apollo_link_core_1.ApolloLink.from([
            new batchHttpLink_1.default({
                fetch: apolloFetch,
            }),
        ]);
        apollo_link_core_1.execute(link, operation).subscribe({
            error: function (received) {
                chai_1.assert.equal(received, error);
                done();
            },
        });
    });
    it("should call observer's next and then complete when apollo fetch returns data", function (done) {
        var results = [
            {
                data: {
                    data: {
                        works: 'great',
                    },
                },
            },
        ];
        var apolloFetch = function (operations) {
            chai_1.assert(Array.isArray(operations));
            chai_1.assert.equal(operations.length, 1);
            chai_1.assert.deepEqual(operations[0].query, graphql_1.print(operation.query));
            return apollo_link_core_1.makePromise(new apollo_link_core_1.Observable(function (observer) {
                observer.next(results);
                observer.complete();
            }));
        };
        apolloFetch.use = function () { return void 0; };
        apolloFetch.useAfter = function () { return void 0; };
        apolloFetch.batchUse = function () { return void 0; };
        apolloFetch.batchUseAfter = function () { return void 0; };
        var link = apollo_link_core_1.ApolloLink.from([
            new batchHttpLink_1.default({
                fetch: apolloFetch,
            }),
        ]);
        var next = sinon.stub();
        apollo_link_core_1.execute(link, operation).subscribe({
            next: next,
            complete: function () {
                chai_1.assert(next.calledOnce);
                chai_1.assert.equal(next.firstCall.args[0], results[0]);
                done();
            },
        });
    });
    var _a;
});
//# sourceMappingURL=batchHttpLink.js.map